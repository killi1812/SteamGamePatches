/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.steamgamepatch.views;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Author;
import hr.algebra.model.Game;
import hr.algebra.model.Patch;
import hr.algebra.steamgamepatch.views.model.GameComboBoxModel;
import hr.algebra.steamgamepatch.views.model.PatchTableModel;
import hr.algebra.utilities.MessageUtils;
import java.awt.Color;
import java.awt.TextField;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;

/**
 *
 * @author fran
 */
public class Patches extends javax.swing.JPanel {

    private final Repository repo;
    private int selectedPatchId;
    private int selectedGameId = 0;

    public Patches() {
        repo = RepositoryFactory.getInstance();
        initComponents();
        SetupTable();
        LoadGames();
        LoadPatches();
    }

    private void LoadGames() {
        try {
            var games = repo.getGames().stream()
                    .sorted((g1, g2) -> g1.name.compareToIgnoreCase(g2.name))
                    .toList();

            //TODO fill the dropdown
            var gameModel = new GameComboBoxModel(games);
            cbGames.setModel(gameModel);
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Get Games"));
        } finally {
        }
    }

    private void LoadPatches() {

        try {
            List<Patch> patches;
            if (selectedGameId == 0) {

                patches = repo.getPatches().stream()
                        .sorted((p1, p2) -> -p1.pubDate.compareTo(p2.pubDate))
                        .toList();
            } else {
                patches = repo.getPatches().stream()
                        .filter(p -> p.gameId == selectedGameId)
                        .sorted((p1, p2) -> -p1.pubDate.compareTo(p2.pubDate))
                        .toList();
            }
            var model = new PatchTableModel(patches);
            tblPatches.setModel(model);
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Load Patches"));
        } finally {

        }
    }

    private void SetupTable() {
        tblPatches.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblPatches.setAutoCreateRowSorter(true);
        tblPatches.setRowHeight(25);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatches = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        epDesc = new javax.swing.JEditorPane();
        btnClear = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        tfLink = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfDate = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfAuthor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbGames = new javax.swing.JComboBox<>();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblPatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPatches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatchesMouseClicked(evt);
            }
        });
        tblPatches.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblPatchesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblPatches);

        epDesc.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(epDesc);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Title:");

        jLabel2.setText("Link:");

        jLabel3.setText("Published Date:");

        jLabel4.setText("Author:");

        jLabel6.setText("Game:");

        cbGames.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbGamesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(172, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCreate)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(cbGames, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(tfDate)
                                            .addComponent(tfAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(119, 119, 119)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1)))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cbGames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(112, 112, 112)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear)
                            .addComponent(btnCreate)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblPatchesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatchesMouseClicked
        int i = tblPatches.getSelectedRow();
        int row = tblPatches.convertRowIndexToModel(i);
        setSelectedPatch((int) tblPatches.getValueAt(row, 0));
    }//GEN-LAST:event_tblPatchesMouseClicked

    private void cbGamesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbGamesItemStateChanged
        selectedGameId = ((Game) cbGames.getSelectedItem()).idSteamGame;
        LoadPatches();
    }//GEN-LAST:event_cbGamesItemStateChanged

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearSelected();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        if (selectedPatchId == 0) {
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch no patch selected"));
            return;
        }
        try {
            repo.deletePatch(selectedPatchId);
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch %d", selectedPatchId));
        } finally {
            clearSelected();
            LoadPatches();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblPatchesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPatchesKeyPressed
        int i = tblPatches.getSelectedRow();
        int row = tblPatches.convertRowIndexToModel(i);
        setSelectedPatch((int) tblPatches.getValueAt(row, 0));
    }//GEN-LAST:event_tblPatchesKeyPressed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm()) {
            MessageUtils.showErrorMessage("ERROR",
                    String.format("Failed To Create new Patch"
                    ));
            return;
        }

        if (selectedGameId == 0) {
            MessageUtils.showErrorMessage("ERROR",
                    String.format("Can't create new patch without selecting a game"
                    ));
            return;
        }

        if (selectedPatchId != 0) {
            MessageUtils.showErrorMessage("ERROR",
                    String.format("Can't create new patch from selected patch"
                    ));
            return;
        }

        Author author = getAuthor();
        if (author == null) {
            return;
        }

        Date pubDate = getParsedDate();
        if (pubDate == null) {
            return;
        }

        Patch newPatch = new Patch(
                tfTitle.getText(),
                epDesc.getText(),
                tfLink.getText(),
                pubDate,
                author.idAuthor,
                selectedGameId);

        try {
            repo.createPatch(newPatch);
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch"));

        } finally {
            clearSelected();
            LoadPatches();
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private Date getParsedDate() {
        var dateRaw = tfDate.getText();
        SimpleDateFormat parser = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return new java.sql.Date(parser.parse(dateRaw).getTime());
        } catch (ParseException e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Wrong date format should be yyyy-MM-dd is  %s", dateRaw));
        }
        return null;
    }

    private Author getAuthor() {
        Author author = null;
        try {
            author = repo.getAuthors().stream()
                    .filter(a -> a.name.equals(tfAuthor.getText()))
                    .findFirst()
                    .orElse(new Author(tfAuthor.getText()));
            if (author.idAuthor == 0) {
                author.idAuthor = repo.createAuthor(author);
            }
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch %d", selectedPatchId));

        }
        return author;
    }

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (!ValidateForm()) {
            MessageUtils.showErrorMessage("ERROR",
                    String.format("Failed To Edit new Patch"
                    ));
            return;
        }
        Author author = getAuthor();
        if (author == null) {
            return;
        }

        Date pubDate = getParsedDate();
        if (pubDate == null) {
            return;
        }

        //TODO get or set game
        int gameId = -1;
        try {
            var p = repo.getPatch(selectedPatchId);
            if (p.isPresent()) {
                gameId = p.get().gameId;
            }
        } catch (Exception e) {
        }

        if (gameId == -1) {
            MessageUtils.showErrorMessage("ERROR",
                    String.format("Failed To edit no Game id"
                    ));
            return;
        }

        Patch newPatch = new Patch(
                tfTitle.getText(),
                epDesc.getText(),
                tfLink.getText(),
                pubDate,
                author.idAuthor,
                //TODO select game
                gameId);

        try {
            repo.updatePatch(selectedPatchId, newPatch);
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch %d", selectedPatchId));

        } finally {
            clearSelected();
            LoadPatches();
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        LoadGames();
    }//GEN-LAST:event_formComponentShown

    private void clearSelected() {

        var netreba = new JTextField();
        var dobarBorder = netreba.getBorder();

        cbGames.setSelectedIndex(0);
        selectedPatchId = 0;

        tfTitle.setText("");
        tfTitle.setBorder(dobarBorder);
        tfLink.setText("");
        tfLink.setBorder(dobarBorder);
        tfDate.setText("");
        tfDate.setBorder(dobarBorder);
        tfAuthor.setText("");
        tfAuthor.setBorder(dobarBorder);
        epDesc.setText("");

    }

    private void setSelectedPatch(int id) {
        Patch patch = null;
        try {
            var p = repo.getPatch(id);
            if (p.isEmpty()) {
                return;
            }
            patch = p.get();
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch %d", selectedPatchId));
        }

        selectedPatchId = patch.idPatch;
        tfTitle.setText(patch.title);
        tfLink.setText(patch.link);
        tfDate.setText(patch.pubDate.toString());
        epDesc.setText(patch.description);

        try {
            var autor = repo.getAuthor(patch.authorId);
            if (autor.isPresent()) {
                tfAuthor.setText(autor.get().name);
            }
        } catch (Exception e) {
            System.out.println(e);
            MessageUtils.showErrorMessage("ERROR", String.format("Failed To Delete Patch %d", selectedPatchId));
        }
    }

    private boolean ValidateForm() {
        var ret = true;
        if (tfTitle.getText().isBlank()) {
            tfTitle.setBorder(new EtchedBorder(Color.RED, Color.RED));
            ret = false;
        }
        if (tfAuthor.getText().isBlank()) {
            tfAuthor.setBorder(new EtchedBorder(Color.RED, Color.RED));
            ret = false;
        }
        if (tfDate.getText().isBlank() || getParsedDate() == null) {
            tfDate.setBorder(new EtchedBorder(Color.RED, Color.RED));
            ret = false;
        }
        if (tfLink.getText().isBlank()) {
            tfLink.setBorder(new EtchedBorder(Color.RED, Color.RED));
            ret = false;
        }
        return ret;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<Game> cbGames;
    private javax.swing.JEditorPane epDesc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPatches;
    private javax.swing.JTextField tfAuthor;
    private javax.swing.JTextField tfDate;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables
}
